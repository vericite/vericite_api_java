/**
 * VeriCiteLmsApiV1
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.sakaiproject.contentreview.vericite.client.api;

import org.sakaiproject.contentreview.vericite.client.ApiCallback;
import org.sakaiproject.contentreview.vericite.client.ApiClient;
import org.sakaiproject.contentreview.vericite.client.ApiException;
import org.sakaiproject.contentreview.vericite.client.ApiResponse;
import org.sakaiproject.contentreview.vericite.client.Configuration;
import org.sakaiproject.contentreview.vericite.client.Pair;
import org.sakaiproject.contentreview.vericite.client.ProgressRequestBody;
import org.sakaiproject.contentreview.vericite.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import org.sakaiproject.contentreview.vericite.client.model.ConsumerData;
import org.sakaiproject.contentreview.vericite.client.model.Error;
import org.sakaiproject.contentreview.vericite.client.model.ConsumerResponse;
import org.sakaiproject.contentreview.vericite.client.model.ExternalContentUploadInfo;
import org.sakaiproject.contentreview.vericite.client.model.AssignmentData;
import org.sakaiproject.contentreview.vericite.client.model.ReportScoreReponse;
import org.sakaiproject.contentreview.vericite.client.model.ReportMetaData;
import org.sakaiproject.contentreview.vericite.client.model.ReportURLLinkReponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for adminConsumerNewConsumerKeyCreatePost */
    private com.squareup.okhttp.Call adminConsumerNewConsumerKeyCreatePostCall(String newConsumerKey, String consumer, String consumerSecret, ConsumerData consumerData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = consumerData;
        
        // verify the required parameter 'newConsumerKey' is set
        if (newConsumerKey == null) {
            throw new ApiException("Missing the required parameter 'newConsumerKey' when calling adminConsumerNewConsumerKeyCreatePost(Async)");
        }
        
        // verify the required parameter 'consumer' is set
        if (consumer == null) {
            throw new ApiException("Missing the required parameter 'consumer' when calling adminConsumerNewConsumerKeyCreatePost(Async)");
        }
        
        // verify the required parameter 'consumerSecret' is set
        if (consumerSecret == null) {
            throw new ApiException("Missing the required parameter 'consumerSecret' when calling adminConsumerNewConsumerKeyCreatePost(Async)");
        }
        
        // verify the required parameter 'consumerData' is set
        if (consumerData == null) {
            throw new ApiException("Missing the required parameter 'consumerData' when calling adminConsumerNewConsumerKeyCreatePost(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/admin/consumer/{newConsumerKey}/create".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "newConsumerKey" + "\\}", apiClient.escapeString(newConsumerKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (consumer != null)
        localVarHeaderParams.put("consumer", apiClient.parameterToString(consumer));
        if (consumerSecret != null)
        localVarHeaderParams.put("consumerSecret", apiClient.parameterToString(consumerSecret));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Request to create a new consumer
     * @param newConsumerKey Key for the new consumer (required)
     * @param consumer requesting consumer (required)
     * @param consumerSecret requesting consumer secret (required)
     * @param consumerData  (required)
     * @return ConsumerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConsumerResponse adminConsumerNewConsumerKeyCreatePost(String newConsumerKey, String consumer, String consumerSecret, ConsumerData consumerData) throws ApiException {
        ApiResponse<ConsumerResponse> resp = adminConsumerNewConsumerKeyCreatePostWithHttpInfo(newConsumerKey, consumer, consumerSecret, consumerData);
        return resp.getData();
    }

    /**
     * 
     * Request to create a new consumer
     * @param newConsumerKey Key for the new consumer (required)
     * @param consumer requesting consumer (required)
     * @param consumerSecret requesting consumer secret (required)
     * @param consumerData  (required)
     * @return ApiResponse&lt;ConsumerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConsumerResponse> adminConsumerNewConsumerKeyCreatePostWithHttpInfo(String newConsumerKey, String consumer, String consumerSecret, ConsumerData consumerData) throws ApiException {
        com.squareup.okhttp.Call call = adminConsumerNewConsumerKeyCreatePostCall(newConsumerKey, consumer, consumerSecret, consumerData, null, null);
        Type localVarReturnType = new TypeToken<ConsumerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Request to create a new consumer
     * @param newConsumerKey Key for the new consumer (required)
     * @param consumer requesting consumer (required)
     * @param consumerSecret requesting consumer secret (required)
     * @param consumerData  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminConsumerNewConsumerKeyCreatePostAsync(String newConsumerKey, String consumer, String consumerSecret, ConsumerData consumerData, final ApiCallback<ConsumerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminConsumerNewConsumerKeyCreatePostCall(newConsumerKey, consumer, consumerSecret, consumerData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConsumerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for adminConsumerNewConsumerKeyUpdatePut */
    private com.squareup.okhttp.Call adminConsumerNewConsumerKeyUpdatePutCall(String newConsumerKey, String consumer, String consumerSecret, ConsumerData consumerData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = consumerData;
        
        // verify the required parameter 'newConsumerKey' is set
        if (newConsumerKey == null) {
            throw new ApiException("Missing the required parameter 'newConsumerKey' when calling adminConsumerNewConsumerKeyUpdatePut(Async)");
        }
        
        // verify the required parameter 'consumer' is set
        if (consumer == null) {
            throw new ApiException("Missing the required parameter 'consumer' when calling adminConsumerNewConsumerKeyUpdatePut(Async)");
        }
        
        // verify the required parameter 'consumerSecret' is set
        if (consumerSecret == null) {
            throw new ApiException("Missing the required parameter 'consumerSecret' when calling adminConsumerNewConsumerKeyUpdatePut(Async)");
        }
        
        // verify the required parameter 'consumerData' is set
        if (consumerData == null) {
            throw new ApiException("Missing the required parameter 'consumerData' when calling adminConsumerNewConsumerKeyUpdatePut(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/admin/consumer/{newConsumerKey}/update".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "newConsumerKey" + "\\}", apiClient.escapeString(newConsumerKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (consumer != null)
        localVarHeaderParams.put("consumer", apiClient.parameterToString(consumer));
        if (consumerSecret != null)
        localVarHeaderParams.put("consumerSecret", apiClient.parameterToString(consumerSecret));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Request to update an existing consumer
     * @param newConsumerKey Key for the consumer to update (required)
     * @param consumer requesting consumer (required)
     * @param consumerSecret requesting consumer secret (required)
     * @param consumerData  (required)
     * @return ConsumerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConsumerResponse adminConsumerNewConsumerKeyUpdatePut(String newConsumerKey, String consumer, String consumerSecret, ConsumerData consumerData) throws ApiException {
        ApiResponse<ConsumerResponse> resp = adminConsumerNewConsumerKeyUpdatePutWithHttpInfo(newConsumerKey, consumer, consumerSecret, consumerData);
        return resp.getData();
    }

    /**
     * 
     * Request to update an existing consumer
     * @param newConsumerKey Key for the consumer to update (required)
     * @param consumer requesting consumer (required)
     * @param consumerSecret requesting consumer secret (required)
     * @param consumerData  (required)
     * @return ApiResponse&lt;ConsumerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConsumerResponse> adminConsumerNewConsumerKeyUpdatePutWithHttpInfo(String newConsumerKey, String consumer, String consumerSecret, ConsumerData consumerData) throws ApiException {
        com.squareup.okhttp.Call call = adminConsumerNewConsumerKeyUpdatePutCall(newConsumerKey, consumer, consumerSecret, consumerData, null, null);
        Type localVarReturnType = new TypeToken<ConsumerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Request to update an existing consumer
     * @param newConsumerKey Key for the consumer to update (required)
     * @param consumer requesting consumer (required)
     * @param consumerSecret requesting consumer secret (required)
     * @param consumerData  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call adminConsumerNewConsumerKeyUpdatePutAsync(String newConsumerKey, String consumer, String consumerSecret, ConsumerData consumerData, final ApiCallback<ConsumerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = adminConsumerNewConsumerKeyUpdatePutCall(newConsumerKey, consumer, consumerSecret, consumerData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConsumerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for assignmentsContextIDAssignmentIDPost */
    private com.squareup.okhttp.Call assignmentsContextIDAssignmentIDPostCall(String contextID, String assignmentID, String consumer, String consumerSecret, AssignmentData assignmentData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = assignmentData;
        
        // verify the required parameter 'contextID' is set
        if (contextID == null) {
            throw new ApiException("Missing the required parameter 'contextID' when calling assignmentsContextIDAssignmentIDPost(Async)");
        }
        
        // verify the required parameter 'assignmentID' is set
        if (assignmentID == null) {
            throw new ApiException("Missing the required parameter 'assignmentID' when calling assignmentsContextIDAssignmentIDPost(Async)");
        }
        
        // verify the required parameter 'consumer' is set
        if (consumer == null) {
            throw new ApiException("Missing the required parameter 'consumer' when calling assignmentsContextIDAssignmentIDPost(Async)");
        }
        
        // verify the required parameter 'consumerSecret' is set
        if (consumerSecret == null) {
            throw new ApiException("Missing the required parameter 'consumerSecret' when calling assignmentsContextIDAssignmentIDPost(Async)");
        }
        
        // verify the required parameter 'assignmentData' is set
        if (assignmentData == null) {
            throw new ApiException("Missing the required parameter 'assignmentData' when calling assignmentsContextIDAssignmentIDPost(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/assignments/{contextID}/{assignmentID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "contextID" + "\\}", apiClient.escapeString(contextID.toString()))
        .replaceAll("\\{" + "assignmentID" + "\\}", apiClient.escapeString(assignmentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (consumer != null)
        localVarHeaderParams.put("consumer", apiClient.parameterToString(consumer));
        if (consumerSecret != null)
        localVarHeaderParams.put("consumerSecret", apiClient.parameterToString(consumerSecret));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Create/update assignment
     * @param contextID Context ID (required)
     * @param assignmentID ID of assignment (required)
     * @param consumer the consumer (required)
     * @param consumerSecret the consumer secret (required)
     * @param assignmentData  (required)
     * @return List&lt;ExternalContentUploadInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ExternalContentUploadInfo> assignmentsContextIDAssignmentIDPost(String contextID, String assignmentID, String consumer, String consumerSecret, AssignmentData assignmentData) throws ApiException {
        ApiResponse<List<ExternalContentUploadInfo>> resp = assignmentsContextIDAssignmentIDPostWithHttpInfo(contextID, assignmentID, consumer, consumerSecret, assignmentData);
        return resp.getData();
    }

    /**
     * 
     * Create/update assignment
     * @param contextID Context ID (required)
     * @param assignmentID ID of assignment (required)
     * @param consumer the consumer (required)
     * @param consumerSecret the consumer secret (required)
     * @param assignmentData  (required)
     * @return ApiResponse&lt;List&lt;ExternalContentUploadInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ExternalContentUploadInfo>> assignmentsContextIDAssignmentIDPostWithHttpInfo(String contextID, String assignmentID, String consumer, String consumerSecret, AssignmentData assignmentData) throws ApiException {
        com.squareup.okhttp.Call call = assignmentsContextIDAssignmentIDPostCall(contextID, assignmentID, consumer, consumerSecret, assignmentData, null, null);
        Type localVarReturnType = new TypeToken<List<ExternalContentUploadInfo>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create/update assignment
     * @param contextID Context ID (required)
     * @param assignmentID ID of assignment (required)
     * @param consumer the consumer (required)
     * @param consumerSecret the consumer secret (required)
     * @param assignmentData  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call assignmentsContextIDAssignmentIDPostAsync(String contextID, String assignmentID, String consumer, String consumerSecret, AssignmentData assignmentData, final ApiCallback<List<ExternalContentUploadInfo>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = assignmentsContextIDAssignmentIDPostCall(contextID, assignmentID, consumer, consumerSecret, assignmentData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ExternalContentUploadInfo>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for reportsScoresContextIDGet */
    private com.squareup.okhttp.Call reportsScoresContextIDGetCall(String contextID, String consumer, String consumerSecret, String assignmentID, String userID, String externalContentID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'contextID' is set
        if (contextID == null) {
            throw new ApiException("Missing the required parameter 'contextID' when calling reportsScoresContextIDGet(Async)");
        }
        
        // verify the required parameter 'consumer' is set
        if (consumer == null) {
            throw new ApiException("Missing the required parameter 'consumer' when calling reportsScoresContextIDGet(Async)");
        }
        
        // verify the required parameter 'consumerSecret' is set
        if (consumerSecret == null) {
            throw new ApiException("Missing the required parameter 'consumerSecret' when calling reportsScoresContextIDGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/reports/scores/{contextID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "contextID" + "\\}", apiClient.escapeString(contextID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (assignmentID != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "assignmentID", assignmentID));
        if (userID != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userID", userID));
        if (externalContentID != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "externalContentID", externalContentID));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (consumer != null)
        localVarHeaderParams.put("consumer", apiClient.parameterToString(consumer));
        if (consumerSecret != null)
        localVarHeaderParams.put("consumerSecret", apiClient.parameterToString(consumerSecret));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Retrieves scores for the reports
     * @param contextID Context ID (required)
     * @param consumer the consumer (required)
     * @param consumerSecret the consumer secret (required)
     * @param assignmentID ID of assignment (optional)
     * @param userID ID of user (optional)
     * @param externalContentID external content id (optional)
     * @return List&lt;ReportScoreReponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ReportScoreReponse> reportsScoresContextIDGet(String contextID, String consumer, String consumerSecret, String assignmentID, String userID, String externalContentID) throws ApiException {
        ApiResponse<List<ReportScoreReponse>> resp = reportsScoresContextIDGetWithHttpInfo(contextID, consumer, consumerSecret, assignmentID, userID, externalContentID);
        return resp.getData();
    }

    /**
     * 
     * Retrieves scores for the reports
     * @param contextID Context ID (required)
     * @param consumer the consumer (required)
     * @param consumerSecret the consumer secret (required)
     * @param assignmentID ID of assignment (optional)
     * @param userID ID of user (optional)
     * @param externalContentID external content id (optional)
     * @return ApiResponse&lt;List&lt;ReportScoreReponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ReportScoreReponse>> reportsScoresContextIDGetWithHttpInfo(String contextID, String consumer, String consumerSecret, String assignmentID, String userID, String externalContentID) throws ApiException {
        com.squareup.okhttp.Call call = reportsScoresContextIDGetCall(contextID, consumer, consumerSecret, assignmentID, userID, externalContentID, null, null);
        Type localVarReturnType = new TypeToken<List<ReportScoreReponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves scores for the reports
     * @param contextID Context ID (required)
     * @param consumer the consumer (required)
     * @param consumerSecret the consumer secret (required)
     * @param assignmentID ID of assignment (optional)
     * @param userID ID of user (optional)
     * @param externalContentID external content id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reportsScoresContextIDGetAsync(String contextID, String consumer, String consumerSecret, String assignmentID, String userID, String externalContentID, final ApiCallback<List<ReportScoreReponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reportsScoresContextIDGetCall(contextID, consumer, consumerSecret, assignmentID, userID, externalContentID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ReportScoreReponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for reportsSubmitRequestContextIDAssignmentIDUserIDPost */
    private com.squareup.okhttp.Call reportsSubmitRequestContextIDAssignmentIDUserIDPostCall(String contextID, String assignmentID, String userID, String consumer, String consumerSecret, ReportMetaData reportMetaData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reportMetaData;
        
        // verify the required parameter 'contextID' is set
        if (contextID == null) {
            throw new ApiException("Missing the required parameter 'contextID' when calling reportsSubmitRequestContextIDAssignmentIDUserIDPost(Async)");
        }
        
        // verify the required parameter 'assignmentID' is set
        if (assignmentID == null) {
            throw new ApiException("Missing the required parameter 'assignmentID' when calling reportsSubmitRequestContextIDAssignmentIDUserIDPost(Async)");
        }
        
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling reportsSubmitRequestContextIDAssignmentIDUserIDPost(Async)");
        }
        
        // verify the required parameter 'consumer' is set
        if (consumer == null) {
            throw new ApiException("Missing the required parameter 'consumer' when calling reportsSubmitRequestContextIDAssignmentIDUserIDPost(Async)");
        }
        
        // verify the required parameter 'consumerSecret' is set
        if (consumerSecret == null) {
            throw new ApiException("Missing the required parameter 'consumerSecret' when calling reportsSubmitRequestContextIDAssignmentIDUserIDPost(Async)");
        }
        
        // verify the required parameter 'reportMetaData' is set
        if (reportMetaData == null) {
            throw new ApiException("Missing the required parameter 'reportMetaData' when calling reportsSubmitRequestContextIDAssignmentIDUserIDPost(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/reports/submit/request/{contextID}/{assignmentID}/{userID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "contextID" + "\\}", apiClient.escapeString(contextID.toString()))
        .replaceAll("\\{" + "assignmentID" + "\\}", apiClient.escapeString(assignmentID.toString()))
        .replaceAll("\\{" + "userID" + "\\}", apiClient.escapeString(userID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (consumer != null)
        localVarHeaderParams.put("consumer", apiClient.parameterToString(consumer));
        if (consumerSecret != null)
        localVarHeaderParams.put("consumerSecret", apiClient.parameterToString(consumerSecret));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Request a file submission
     * @param contextID Context ID (required)
     * @param assignmentID ID of assignment (required)
     * @param userID ID of user (required)
     * @param consumer the consumer (required)
     * @param consumerSecret the consumer secret (required)
     * @param reportMetaData  (required)
     * @return List&lt;ExternalContentUploadInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ExternalContentUploadInfo> reportsSubmitRequestContextIDAssignmentIDUserIDPost(String contextID, String assignmentID, String userID, String consumer, String consumerSecret, ReportMetaData reportMetaData) throws ApiException {
        ApiResponse<List<ExternalContentUploadInfo>> resp = reportsSubmitRequestContextIDAssignmentIDUserIDPostWithHttpInfo(contextID, assignmentID, userID, consumer, consumerSecret, reportMetaData);
        return resp.getData();
    }

    /**
     * 
     * Request a file submission
     * @param contextID Context ID (required)
     * @param assignmentID ID of assignment (required)
     * @param userID ID of user (required)
     * @param consumer the consumer (required)
     * @param consumerSecret the consumer secret (required)
     * @param reportMetaData  (required)
     * @return ApiResponse&lt;List&lt;ExternalContentUploadInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ExternalContentUploadInfo>> reportsSubmitRequestContextIDAssignmentIDUserIDPostWithHttpInfo(String contextID, String assignmentID, String userID, String consumer, String consumerSecret, ReportMetaData reportMetaData) throws ApiException {
        com.squareup.okhttp.Call call = reportsSubmitRequestContextIDAssignmentIDUserIDPostCall(contextID, assignmentID, userID, consumer, consumerSecret, reportMetaData, null, null);
        Type localVarReturnType = new TypeToken<List<ExternalContentUploadInfo>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Request a file submission
     * @param contextID Context ID (required)
     * @param assignmentID ID of assignment (required)
     * @param userID ID of user (required)
     * @param consumer the consumer (required)
     * @param consumerSecret the consumer secret (required)
     * @param reportMetaData  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reportsSubmitRequestContextIDAssignmentIDUserIDPostAsync(String contextID, String assignmentID, String userID, String consumer, String consumerSecret, ReportMetaData reportMetaData, final ApiCallback<List<ExternalContentUploadInfo>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reportsSubmitRequestContextIDAssignmentIDUserIDPostCall(contextID, assignmentID, userID, consumer, consumerSecret, reportMetaData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ExternalContentUploadInfo>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for reportsUrlsContextIDGet */
    private com.squareup.okhttp.Call reportsUrlsContextIDGetCall(String contextID, String assignmentIDFilter, String consumer, String consumerSecret, String tokenUser, String tokenUserRole, String userIDFilter, String externalContentIDFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'contextID' is set
        if (contextID == null) {
            throw new ApiException("Missing the required parameter 'contextID' when calling reportsUrlsContextIDGet(Async)");
        }
        
        // verify the required parameter 'assignmentIDFilter' is set
        if (assignmentIDFilter == null) {
            throw new ApiException("Missing the required parameter 'assignmentIDFilter' when calling reportsUrlsContextIDGet(Async)");
        }
        
        // verify the required parameter 'consumer' is set
        if (consumer == null) {
            throw new ApiException("Missing the required parameter 'consumer' when calling reportsUrlsContextIDGet(Async)");
        }
        
        // verify the required parameter 'consumerSecret' is set
        if (consumerSecret == null) {
            throw new ApiException("Missing the required parameter 'consumerSecret' when calling reportsUrlsContextIDGet(Async)");
        }
        
        // verify the required parameter 'tokenUser' is set
        if (tokenUser == null) {
            throw new ApiException("Missing the required parameter 'tokenUser' when calling reportsUrlsContextIDGet(Async)");
        }
        
        // verify the required parameter 'tokenUserRole' is set
        if (tokenUserRole == null) {
            throw new ApiException("Missing the required parameter 'tokenUserRole' when calling reportsUrlsContextIDGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/reports/urls/{contextID}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "contextID" + "\\}", apiClient.escapeString(contextID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (assignmentIDFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "assignmentIDFilter", assignmentIDFilter));
        if (userIDFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userIDFilter", userIDFilter));
        if (externalContentIDFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "externalContentIDFilter", externalContentIDFilter));
        if (tokenUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tokenUser", tokenUser));
        if (tokenUserRole != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tokenUserRole", tokenUserRole));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (consumer != null)
        localVarHeaderParams.put("consumer", apiClient.parameterToString(consumer));
        if (consumerSecret != null)
        localVarHeaderParams.put("consumerSecret", apiClient.parameterToString(consumerSecret));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Retrieves URLS for the reports
     * @param contextID Context ID (required)
     * @param assignmentIDFilter ID of assignment to filter results on (required)
     * @param consumer the consumer (required)
     * @param consumerSecret the consumer secret (required)
     * @param tokenUser ID of user who will view the report (required)
     * @param tokenUserRole role of user who will view the report (required)
     * @param userIDFilter ID of user to filter results on (optional)
     * @param externalContentIDFilter external content id to filter results on (optional)
     * @return List&lt;ReportURLLinkReponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ReportURLLinkReponse> reportsUrlsContextIDGet(String contextID, String assignmentIDFilter, String consumer, String consumerSecret, String tokenUser, String tokenUserRole, String userIDFilter, String externalContentIDFilter) throws ApiException {
        ApiResponse<List<ReportURLLinkReponse>> resp = reportsUrlsContextIDGetWithHttpInfo(contextID, assignmentIDFilter, consumer, consumerSecret, tokenUser, tokenUserRole, userIDFilter, externalContentIDFilter);
        return resp.getData();
    }

    /**
     * 
     * Retrieves URLS for the reports
     * @param contextID Context ID (required)
     * @param assignmentIDFilter ID of assignment to filter results on (required)
     * @param consumer the consumer (required)
     * @param consumerSecret the consumer secret (required)
     * @param tokenUser ID of user who will view the report (required)
     * @param tokenUserRole role of user who will view the report (required)
     * @param userIDFilter ID of user to filter results on (optional)
     * @param externalContentIDFilter external content id to filter results on (optional)
     * @return ApiResponse&lt;List&lt;ReportURLLinkReponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ReportURLLinkReponse>> reportsUrlsContextIDGetWithHttpInfo(String contextID, String assignmentIDFilter, String consumer, String consumerSecret, String tokenUser, String tokenUserRole, String userIDFilter, String externalContentIDFilter) throws ApiException {
        com.squareup.okhttp.Call call = reportsUrlsContextIDGetCall(contextID, assignmentIDFilter, consumer, consumerSecret, tokenUser, tokenUserRole, userIDFilter, externalContentIDFilter, null, null);
        Type localVarReturnType = new TypeToken<List<ReportURLLinkReponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves URLS for the reports
     * @param contextID Context ID (required)
     * @param assignmentIDFilter ID of assignment to filter results on (required)
     * @param consumer the consumer (required)
     * @param consumerSecret the consumer secret (required)
     * @param tokenUser ID of user who will view the report (required)
     * @param tokenUserRole role of user who will view the report (required)
     * @param userIDFilter ID of user to filter results on (optional)
     * @param externalContentIDFilter external content id to filter results on (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reportsUrlsContextIDGetAsync(String contextID, String assignmentIDFilter, String consumer, String consumerSecret, String tokenUser, String tokenUserRole, String userIDFilter, String externalContentIDFilter, final ApiCallback<List<ReportURLLinkReponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reportsUrlsContextIDGetCall(contextID, assignmentIDFilter, consumer, consumerSecret, tokenUser, tokenUserRole, userIDFilter, externalContentIDFilter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ReportURLLinkReponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
